# Define the name of the GitHub Action workflow
name: Create an ec2 instance
# This workflow is manually triggered using the GitHub Actions UI
on:
  workflow_dispatch:
    # Define inputs that are required for the manual trigger
    inputs:
      instanceName:
        description: 'Name of the AWS Instance'  # What's this input for?
        required: true  # Is it optional or required?
      instanceType:
        description: 'Name of the AWS Instance'  # What's this input for?
        required: true  # Is it optional or required?
      accessKey:
        description: 'Access Key'  
        required: true  
      secretKey:
        description: 'Secret Key'  
        required: true  
      region:
        description: 'AWS Region for the instance'
        required: true
      action:
        description: 'Action to perform (apply/destroy)'
        required: true
# Jobs to be executed in this workflow
jobs:
  # Job for applying the ec2 instance
  apply_ec2:
    # Use the latest Ubuntu runner
    runs-on: ubuntu-latest
    
    # Execute this step only if the action input is "apply"
    if: ${{ github.event.inputs.action == 'apply' }}
    # Define the steps for this job
    steps:
    
    # checkout the code from the repository
    - name: Checkout code
      uses: actions/checkout@v2

# adding aws keys. Please store the value of these key in GitHub variables
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ github.event.inputs.accessKey }}
        aws-secret-access-key: ${{ github.event.inputs.secretKey }}
        
    #Installing Terraform
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.2.0"
      
    # Initialize Terraform 
    - name: Terraform Init
      run: terraform init
      working-directory: .  
      
    # Format Terraform code
    - name: Terraform Format
      run: terraform fmt
      working-directory: .
      
    # Validate the Terraform code 
    - name: Terraform Validate
      run: terraform validate
      working-directory: .
      
    # Apply the Terraform plan
    - name: terraform apply
      run: terraform apply -var instanceName=${{ github.event.inputs.instanceName }} -var region=${{ github.event.inputs.region }} -var instanceType=${{ github.event.inputs.instanceType }} -auto-approve
      working-directory: .

  # Destroying the  ec2 instance
  destroy_instance:
    runs-on: ubuntu-latest
    
    # Execute this job only if the action input is "destroy"
    if: ${{ github.event.inputs.action == 'destroy' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      
# adding aws keys. Please store the value of these key in GitHub variables
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ github.event.inputs.accessKey }}
        aws-secret-access-key: ${{ github.event.inputs.secretKey }}

    #Installing Terraform
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.2.0"
        
    - name: Terraform Init
      run: terraform init
      working-directory: .
      
    - name: Terraform FMT
      run: terraform fmt
      working-directory: .
      
      
    # Destroy all resources 
    - name: Terraform Destroy
      run: terraform destroy -var instanceName=${{ github.event.inputs.instanceName }} -var region=${{ github.event.inputs.region }} -var instanceType=${{ github.event.inputs.instanceType }} -auto-approve
      working-directory: .
